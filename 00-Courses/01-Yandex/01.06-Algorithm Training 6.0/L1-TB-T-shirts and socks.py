import pytest
"""
*-----------------------*---------------------------------------*
|   Ограничение времени |   1 секунда                           |
|   Ограничение памяти  |   256Mb                               |
|   Ввод                |   стандартный ввод или input.txt      |
|   Вывод               |   стандартный вывод или output.txt    |
*-----------------------*---------------------------------------*

Как известно, осенью и зимой светает поздно, и так хочется утром ещё хоть немного поспать, а не идти в школу! Некоторые школьники готовы даже одеваться, не открывая глаз, лишь бы отложить момент пробуждения. Вот и Саша решил, что майку и носки он вполне может вытащить из шкафа на ощупь с закрытыми глазами и только потом включить свет и одеться. В шкафу у Саши есть два ящика. В одном из них лежит A синих и B красных маек, в другом — C синих и D красных пар носков. Саша хочет, чтобы и майка, и носки были одного цвета. Он вслепую вытаскивает M маек и N пар носков. В первое же утро Саша задумался, какое минимальное суммарное количество предметов одежды (M+N) он должен вытащить, чтобы среди них гарантированно оказались майка и носки одного цвета. Какого именно цвета окажутся предметы одежды, для Саши совершенно неважно.

# Формат ввода
На вход программе подаются четыре целых неотрицательных числа A, B, C, D, записанных в отдельных строках: A — количество синих маек, B — количество красных маек, C — количество синих носков, D — количество красных носков. Все числа не превосходят 10^9. Гарантируется, что в шкафу есть одноцветный комплект из майки и носков.

# Формат вывода
Программа должна вывести два числа: количество маек M и количество пар носков N, которые должен взять Саша. Необходимо, чтобы среди M маек и N пар носков обязательно нашлась одноцветная пара, при этом сумма M+N должна быть минимальной.

# Примечания
В примере из условия в шкафу лежит A=6 синих маек и B=2 красных маек. Если взять 3 майки, то среди них обязательно найдётся синяя. В другом ящике лежит C=7 пар синих носков и D=3 пары красных носков. Если взять 4 пары, то среди них обязательно будет пара синих носков. Поэтому если взять вслепую 3 майки и 4 пары носков, то среди них обязательно найдётся одноцветный (синий) комплект из майки и носков.
"""

def test_example():
    assert getMinClothes( 6, 2, 7, 3 ) == (3, 4)

def test_custom():
    # Тест 1: Одинаковое количество синих и красных маек и носков
    assert getMinClothes(7, 3, 7, 3) == (4, 4)

    # Тест 2: Больше синих маек и носков
    assert getMinClothes(10, 5, 8, 2) == (6, 3)

    # Тест 3: Больше красных маек и носков
    assert getMinClothes(3, 7, 2, 9) == (4, 3)

    # Тест 4: Одинаковое количество синих и красных маек и носков
    assert getMinClothes(5, 5, 5, 5) == (6, 1)

    # Тест 5: Один цвет маек и носков отсутствует
    assert getMinClothes(0, 5, 0, 5) == (1, 1)

    # Тест 6: Один цвет маек и носков преобладает
    assert getMinClothes(1, 1000, 1, 1000) == (2, 2)

    # Тест 7: Большие значения
    assert getMinClothes(10**9, 1, 1, 10**9) == (10**9 + 1, 1)
    
    # Тест 8: Одинаковые значения
    assert getMinClothes(1, 1, 1, 1) == (2, 1)


def getMinClothes(
    A: int, 
    B: int, 
    C: int, 
    D: int
) -> tuple[int,int]:
    ans:list[tuple[int,int]] = []
    if A > 0 and C > 0:
        ans.append((B + 1, D + 1))
    if B > 0 and D > 0:
        ans.append((A + 1, C + 1))
    if A > 0 and B > 0:
        ans.append((max(A, B) + 1, 1))
    if C > 0 and D > 0:
        ans.append((1 , max(C , D) + 1))
    return min(ans , key=sum)

    
def main() -> None:
    A = int(input())
    B = int(input())
    C = int(input())
    D = int(input())
    
    res = getMinClothes(A, B, C, D)
    
    print(*res)


if __name__ == "__main__":
    main()
